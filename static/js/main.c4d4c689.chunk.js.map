{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getCountingSortAnimations","arr","max","apply","Object","toConsumableArray","min","count","Array","fill","output","countSort","SortingVisualizer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resetArray","random","setState","document","getElementById","setAttribute","_loop","arrayBars","getElementsByClassName","_animations$i","slicedToArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","_animations$i2","newHeight","height","concat","removeAttribute","_loop2","isColorChange","_animations$i3","ANIMATION_SPEED_MS","_animations$i4","key","insertionSortHelp","getInsertionSortAnimations","_loop3","_animations$i5","_animations$i6","sorted","temp","bubbleSortHelp","getbubbleSortAnimations","_loop4","_animations$i7","_animations$i8","_this2","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","onClick","mergeSort","countingSort","insertionSort","BubbleSort","map","value","idx","React","Component","App","SortingVisualizer_SortingVisualizer_SortingVisualizer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4d4c689.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getInsertionSortAnimations(array) {\n  if (array.length <= 1) return array;\n\n  const animations = [];\n\n  const auxiliaryArray = array;\n\n  insertionSortHelp(auxiliaryArray, animations);\n\n  return animations;\n}\n\nfunction insertionSortHelp(arr, animations) {\n  var i, key, j;\n  for (i = 1; i < arr.length; i++) {\n    key = arr[i];\n    animations.push([i, -1]);\n    j = i - 1;\n\n    /* Move elements of arr[0..i-1], that are  \n    greater than key, to one position ahead  \n    of their current position */\n    while (j >= 0 && arr[j] > key) {\n      animations.push([j, -1]);\n      animations.push([j, -2]);\n      animations.push([j + 1, arr[j]]);\n      arr[j + 1] = arr[j];\n      j = j - 1;\n    }\n    animations.push([j + 1, key]);\n    arr[j + 1] = key;\n    animations.push([i, -2]);\n  }\n}\n\n\nexport function getCountingSortAnimations(array) {\n  if (array.length <= 1) return array;\n\n  const animations = [];\n\n  //const auxiliaryArray = array;\n\n  countSort(array, animations);\n\n  return animations;\n}\n\nfunction countSort(arr, animations) {\n  var max = Math.max(...arr);\n  var min = Math.min(...arr);\n  var range = max - min + 1;\n\n  //const count = [];\n  const count = new Array(range).fill(0);\n  //const output = [];\n  const output = new Array(arr.length).fill(0);\n  //vector < int > count(range), output(arr.size());\n  for (let i = 0; i < arr.length; i++) {\n    animations.push([i, -1]);\n    animations.push([i, -2]);\n    count[arr[i] - min]++;\n  }\n\n  for (let i = 1; i < count.length; i++) {\n    count[i] += count[i - 1];\n  }\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    output[count[arr[i] - min] - 1] = arr[i];\n    count[arr[i] - min]--;\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    animations.push([i, -1]);\n    animations.push([i, -2]);\n    animations.push([i, output[i]]);\n    arr[i] = output[i];\n  }\n}\n\nexport function getbubbleSortAnimations(array) {\n\n  if (array.length <= 1) return array;\n\n  const animations = [];\n\n  const auxiliaryArray = array.slice();\n\n  bubbleSortHelp(auxiliaryArray, animations);\n\n  return animations;\n\n}\n\nfunction bubbleSortHelp(\n  arr,\n  animations,\n) {\n\n  let sorted, j = 0;\n  do {\n    sorted = false;\n    for (let i = 0; i < arr.length - 1 - j; i++) {\n      animations.push([i, i + 1, true]);\n\n      animations.push([i, i + 1, true]);\n\n      if (arr[i] > arr[i + 1]) {\n\n        animations.push([i, arr[i + 1], false]);\n\n        animations.push([i + 1, arr[i], false]);\n\n        let temp = arr[i];\n\n        arr[i] = arr[i + 1];\n\n        arr[i + 1] = temp;\n\n        sorted = true;\n      }\n\n\n    }\n    j++;\n\n  } while (sorted);\n\n}","import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getbubbleSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { getCountingSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 333;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(10, 650));\n    }\n    //resetColor();\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    let animationSpeed = ANIMATION_SPEED_MS;\n    document.getElementById('gb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('mb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('qb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('hb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('bb').setAttribute(\"disabled\", \"disabled\");\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * animationSpeed);\n      }\n      setTimeout(() => {\n        document.getElementById('gb').removeAttribute(\"disabled\");\n        document.getElementById('mb').removeAttribute(\"disabled\");\n        document.getElementById('qb').removeAttribute(\"disabled\");\n        document.getElementById('hb').removeAttribute(\"disabled\");\n        document.getElementById('bb').removeAttribute(\"disabled\");\n      }, animations.length * animationSpeed)\n    }\n  }\n\n  countingSort() {\n    const animationSpeed = ANIMATION_SPEED_MS * 10;\n    document.getElementById('gb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('mb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('qb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('hb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('bb').setAttribute(\"disabled\", \"disabled\");\n    const animations = getCountingSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = animations[i][1];\n      if (isColorChange < 0) {\n        const [barOneIdx, x] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const color = isColorChange === -1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n        }, i * animationSpeed);\n      }\n      else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          //barOneStyle.backgroundColor = \"lightblue\";\n        }, i * animationSpeed);\n      }\n      setTimeout(() => {\n        document.getElementById('gb').removeAttribute(\"disabled\");\n        document.getElementById('mb').removeAttribute(\"disabled\");\n        document.getElementById('qb').removeAttribute(\"disabled\");\n        document.getElementById('hb').removeAttribute(\"disabled\");\n        document.getElementById('bb').removeAttribute(\"disabled\");\n      }, animations.length * animationSpeed);\n    }\n  }\n\n  insertionSort() {\n    const animationSpeed = ANIMATION_SPEED_MS * 0.1;\n    document.getElementById('gb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('mb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('qb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('hb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('bb').setAttribute(\"disabled\", \"disabled\");\n    const animations = getInsertionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = animations[i][1];\n      if (isColorChange < 0) {\n        const [barOneIdx, x] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const color = isColorChange === -1 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n        }, i * animationSpeed);\n      }\n      else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * animationSpeed);\n      }\n      setTimeout(() => {\n        document.getElementById('gb').removeAttribute(\"disabled\");\n        document.getElementById('mb').removeAttribute(\"disabled\");\n        document.getElementById('qb').removeAttribute(\"disabled\");\n        document.getElementById('hb').removeAttribute(\"disabled\");\n        document.getElementById('bb').removeAttribute(\"disabled\");\n      }, animations.length * animationSpeed);\n    }\n\n  }\n\n  BubbleSort() {\n    const animationSpeed = ANIMATION_SPEED_MS * 0.1;\n    document.getElementById('gb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('mb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('qb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('hb').setAttribute(\"disabled\", \"disabled\");\n    document.getElementById('bb').setAttribute(\"disabled\", \"disabled\");\n    const animations = getbubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = animations[i][2];\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * animationSpeed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * animationSpeed);\n      }\n      setTimeout(() => {\n        document.getElementById('gb').removeAttribute(\"disabled\");\n        document.getElementById('mb').removeAttribute(\"disabled\");\n        document.getElementById('qb').removeAttribute(\"disabled\");\n        document.getElementById('hb').removeAttribute(\"disabled\");\n        document.getElementById('bb').removeAttribute(\"disabled\");\n      }, animations.length * animationSpeed)\n\n    }\n\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  // testSortingAlgorithms() {\n  //   for (let i = 0; i < 100; i++) {\n  //     const array = [];\n  //     const length = randomIntFromInterval(1, 1000);\n  //     for (let i = 0; i < length; i++) {\n  //       array.push(randomIntFromInterval(-1000, 1000));\n  //     }\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  //     const mySortedArray = getBubbleSortAnimations(array.slice());\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mySortedArray));\n  //   }\n  // }\n\n  render() {\n    const { array } = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg\" style={{ backgroundColor: '#242424' }}>\n          <a className=\"navbar-brand\" style={{ backgroundColor: '#242424', color: 'white' }} href=\"#\">Sorting-Visualizer</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n            <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item active\">\n                <button id=\"gb\" className=\"btn btn-dark\" type=\"button\" style={{ backgroundColor: '#242424' }} onClick={() => this.resetArray()}>Generate New Array</button>\n              </li>\n              <li className=\"nav-item\">\n                <button id=\"mb\" className=\"btn btn-dark\" style={{ backgroundColor: '#242424' }} onClick={() => this.mergeSort()}>Merge Sort</button>\n              </li>\n              <li className=\"nav-item\">\n                <button id=\"hb\" className=\"btn btn-dark\" style={{ backgroundColor: '#242424' }} onClick={() => this.countingSort()}>Counting Sort</button>\n              </li>\n              <li className=\"nav-item\">\n                <button id=\"qb\" className=\"btn btn-dark\" style={{ backgroundColor: '#242424' }} onClick={() => this.insertionSort()}>Insertion Sort</button>\n              </li>\n              <li className=\"nav-item\">\n                <button id=\"bb\" className=\"btn btn-dark\" style={{ backgroundColor: '#242424' }} onClick={() => this.BubbleSort()}>Bubble Sort</button>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            //let margin = value > 0? 50 : 10;\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n                //marginBottom: `${margin}px`, \n              }}></div>\n          ))}\n          {/* <button onClick={() => this.testSortingAlgorithms()}>\n            Test Sorting Algorithms (BROKEN)\n        </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function resetColor() {\n//   const arrayBars = document.getElementsByClassName('array-bar');\n//   for (let i = 0; i < arrayBars.length; i++) {\n//     arrayBars[i].style.backgroundColor = \"turquoise\";\n//   }\n// }\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}